# Tabela associativa para o relacionamento muitos-para-muitos
filmes_sessoes = Table(
    'filmes_sessoes',
    db.Model.metadata,
    Column('filmes_id', ForeignKey('filme.id'), primary_key=True),
    Column('sessoes_id', ForeignKey('sessao.id'), primary_key=True)
)




    <h2>Cadastro de Filmes</h2>
    <form action="{{ url_for('filmes.add_filme') }}" method="POST">
        <label for="titulo">Título do Filme:</label>
        <input type="text" name="titulo" required>

        <label for="sinopse">Sinopse:</label>
        <input type="text" name="sinopse" required>


        <label for="genero">Gênero:</label>
        {% for genero in generos %}
            <div>
                <input type="checkbox" name="generos" value="{{ genero.nome }}" id="{{ genero.nome }}">
                <label for="{{ genero.nome }}">{{ genero.nome }}</label>
            </div>
        {% endfor %}

        <label for="duracao">Duração:</label>
        <input type="time" name="duracao" required>

        <label for="classificacao">Classificação Indicativa:</label>
        <input type="number" name="classificacao" required>

        <label for="data_lancamento">Data de Lançamento:</label>
        <input type="date" name="data_lancamento" required>

        <h1>Carregar Imagem/Banner do Filme</h1>
        <form method="POST" enctype="multipart/form-data">
            <input type="file" name="file" required>
        </form>


        <button type="submit">Adicionar Filme</button>
    </form>




filmes_generos = Table(
    'filmes_generos',
    db.Model.metadata,
    Column('filmes_id', ForeignKey('filme.id'), primary_key=True),
    Column('generos_id', ForeignKey('genero.id'), primary_key=True)
)

class Genero(db.Model):
    id: Mapped[int] = mapped_column(primary_key=True)
    nome: Mapped[str] = mapped_column() 
    filmes = relationship('filme', secondary=filmes_generos, back_populates='generos') 


class Filme(db.Model):
    id: Mapped[int] = mapped_column(primary_key=True)
    titulo: Mapped[str] = mapped_column()
    duracao: Mapped[str] = mapped_column()
    generos: Mapped[List['Genero']] = relationship('Genero', secondary=filmes_generos, back_populates='filmes') 

    @classmethod
    def all(cls):
        return db.session.query(cls).all()

    @classmethod
    def get(cls, id):
        return cls.query.get_or_404(id)

    @classmethod
    def get_by_titulo(cls, titulo):
        return cls.query.filter_by(titulo=titulo).first()

    @classmethod
    def add_filme(cls, titulo, duracao):
        filme = cls(titulo=titulo, duracao=duracao)

        db.session.add(filme)
        db.session.commit()

    @classmethod
    def edit_titulo(cls, id, titulo):
        filme = cls.get(id)
        filme.titulo = titulo
        db.session.commit()